// @flow
/**
 * Flowtype definitions for jss
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 **/

import * as React from "react";
import { type Theme } from "./theme";
declare export var getJss: () => any;
declare type CssClass = {
  [K: string]: string | number | boolean | CssClass
};
declare type Sheet = {
  [K: string]: CssClass
};
declare type ObjValuesToStr<O> = $ObjMapi<O, <Key>(Key) => string>;
/**
 * This function does nothing, this is just used to make css-in-js autocomplete
 * editor extensions work with JSS. @see https://github.com/ansumanshah/css-in-js
 */
declare export var createSheet: <S: Sheet>(sheet: S) => ObjValuesToStr<S>;
declare export var withSheet: <S: ObjValuesToStr<Sheet>>(
  sheet: S
) => <P: mixed>(
  Component: React.ComponentType<P>
) =>
  | (React.ComponentType<$Diff<P, { classes: * }>, any> & {
      WrappedComponent: React.ComponentType<P>
    })
  | (React.ComponentType<$Diff<P, { classes: * }>> & {
      WrappedComponent: React.ComponentType<P>
    });
declare export var removeJssProps: <
  P: {
    sheet?: any,
    classes?: any
  }
>(
  props: P
) => $Diff<P, { sheet: *, classes: * }>;
declare type Props = { [key: string]: any };
declare type CSSValue =
  | void
  | number
  | boolean
  | string
  | ((props: Props) => void | string | number | boolean);
declare type ClassDefinition = {
  [cssProp: string]:
    | CSSValue
    | {
        [cssProp: string]:
          | CSSValue
          | {
              [cssProp: string]: CSSValue
            }
      }
};
declare type StylesDefinition = {
  [className: string]: ClassDefinition
};
declare type UseStyles<S: StylesDefinition> = (
  props?: Props
) => ObjValuesToStr<S>;
declare export var createUseStyles: <S: StylesDefinition>(
  styles?: ((theme: Theme) => S) | void
) => UseStyles<S>;
declare export {};
