// @flow
/**
 * Flowtype definitions for text-field-base
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as React from "react";
import { type FieldValidator } from "./form-context";

/**
 * Incomplete list, add more if needed
 * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete
 */
export type AutoComplete =
  | "on"
  | "off"
  | "name"
  | "email"
  | "tel"
  | "street-address"
  | "postal-code"
  | "transaction-amount"
  | "new-password"
  | "current-password"
  | "cc-type"
  | "cc-name"
  | "cc-number"
  | "cc-exp"
  | "cc-csc"
  | "username";
export type CommonFormFieldProps = {
  autoFocus?: boolean,
  disabled?: boolean,
  error?: boolean,
  helperText?: string,
  id?: string,
  label: string,
  name: string,
  optional?: boolean,
  maxLength?: number,
  inputProps?: { [prop: string]: string | number, ... },
  validate?: FieldValidator,
  autoComplete?: AutoComplete,
  onFocus?: (event: SyntheticFocusEvent<>) => void,
  onBlur?: (event: SyntheticFocusEvent<>) => void,
  fullWidth?: boolean,
  getSuggestions?: (text: string) => Array<string>,
  placeholder?: string,
  value?: string,
  defaultValue?: string,
  onChange?: (event: SyntheticEvent<HTMLInputElement>) => void,
  readOnly?: boolean,
};
declare type TextFieldBaseProps = {
  id?: string,
  type?: string,
  autoComplete?: AutoComplete,
  autoFocus?: boolean,
  disabled?: boolean,
  error?: boolean,
  pattern?: string,
  required?: boolean,
  fullWidth?: boolean,
  helperText?: string,
  label?: string,
  placeholder?: string,
  defaultValue?: string,
  name?: string,
  maxLength?: number,
  prefix?: React.Node,
  startIcon?: React.Node,
  endIcon?: React.Node,
  style?: CssStyle,
  value?: string,
  inputRef?: React.Ref<HTMLInputElement | HTMLSelectElement>,
  getSuggestions?: (value: string) => Array<string>,
  onClick?: (event: SyntheticMouseEvent<>) => void,
  onChange?: (event: SyntheticEvent<HTMLInputElement>) => void,
  onBlur?: (event: SyntheticFocusEvent<>) => void,
  onFocus?: (event: SyntheticFocusEvent<>) => void,
  onKeyDown?: (event: SyntheticKeyboardEvent<>) => void,
  inputProps?: { [name: string]: string | number, ... },
  inputComponent?: React.ComponentType<any>,
  shrinkLabel?: boolean,
  focus?: boolean,
  fieldRef?: React.Ref<"div">,
  onInput?: (event: SyntheticEvent<HTMLInputElement>) => void,
  multiline?: boolean,
  inputMode?: string,
  readOnly?: boolean
};
declare var TextFieldBase: React.Component<TextFieldBaseProps>;
declare export default typeof TextFieldBase;

import { type CssStyle } from "./__types__.js.flow";
