// @flow

import * as React from "react";
import { ButtonLink } from "./button";
import type { RendersNullableElement } from "./utils/types";
import type { ExclusifyUnion } from "./utils/utility-types";
declare type BaseDialogProps = {
  className?: string,
  title?: string,
  icon?: React.Element<any>,
  message: string,
  acceptText?: string,
  onAccept?: () => void,
  destructive?: boolean,
};
declare type AlertProps = {
  ...$Exact<BaseDialogProps>,

  showClose?: boolean,
};
declare type ConfirmProps = {
  ...$Exact<BaseDialogProps>,

  showClose?: boolean,
  showCancel?: boolean,
  cancelText?: string,
  onCancel?: () => void,
};
declare type ExtendedDialogProps = {
  ...$Exact<BaseDialogProps>,

  subtitle?: string,
  extra?: React.Node,
  forceWeb?: boolean,
  showClose?: boolean,
  showCancel?: boolean,
  cancelText?: string,
  onCancel?: () => void,
  link?: RendersNullableElement<typeof ButtonLink>,
};
declare type DialogProps = ExclusifyUnion<
  AlertProps | ConfirmProps | ExtendedDialogProps
>;
declare type DialogRootProps = {
  children?: React.Node,
};
declare type DialogRootState = {
  dialogProps: DialogProps | null,
  isClosing: boolean,
  instanceNumber: number,
};
declare export default class DialogRoot
  mixins React.Component<DialogRootProps, DialogRootState>
{
  state: DialogRootState;
  componentDidMount(): void;
  componentWillUnmount(): void;
  show(props: DialogProps): void;
  callback: null | (() => void);
  handleCloseFinished: () => void;
  handleBack: () => void;
  close(): void;
  createCancelHandler(onCancel?: () => void): () => void;
  createAcceptHandler(onAccept?: () => void): () => void;
  render(): React.Node;
}
/**
 * Shows alert dialog with supplied props
 */
declare export var alert: (props: AlertProps) => void;
/**
 * Shows confirm dialog with supplied props
 */
declare export var confirm: (props: ConfirmProps) => void;
/**
 * Shows dialog with supplied props
 */
declare export var dialog: (props: ExtendedDialogProps) => void;
declare export {};
