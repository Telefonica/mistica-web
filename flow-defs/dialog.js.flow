// @flow

import * as React from "react";
declare type DialogProps = {
  className?: string,
  title?: string,
  icon?: React.Element<any>,
  message: string,
  cancelText?: string,
  acceptText?: string,
  onCancel?: () => void,
  onAccept?: () => void,
  showCancel?: boolean,
  destructive?: boolean,
};
declare type DialogRootProps = {
  children?: React.Node,
};
declare type DialogRootState = {
  dialogProps: DialogProps | null,
  isClosing: boolean,
  instanceNumber: number,
};
declare export default class DialogRoot
  mixins React.Component<DialogRootProps, DialogRootState>
{
  state: DialogRootState;
  componentDidMount(): void;
  componentWillUnmount(): void;
  show(props: DialogProps): void;
  callback: null | (() => void);
  handleCloseFinished: () => void;
  handleBack: () => void;
  close(): void;
  createCancelHandler(onCancel?: () => void): () => void;
  createAcceptHandler(onAccept?: () => void): () => void;
  render(): React.Node;
}
/**
 * Shows alert dialog with supplied props
 */
declare export var alert: (props: DialogProps) => void;
/**
 * Shows confirm dialog with supplied props
 */
declare export var confirm: (props: DialogProps) => void;
declare export {};
