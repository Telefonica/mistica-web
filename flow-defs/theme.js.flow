// @flow

import * as React from "react";
import type { RegionCode } from "./utils/region-code";
import type { Locale } from "./utils/locale";
import type { Skin, Colors, SkinName, TextPresetsConfig } from "./skins/types";
import type { TrackingEvent } from "./utils/types";
import type { MediaQueries } from "./utils/media-queries";
export type ThemeTexts = typeof TEXTS_ES;
declare var TEXTS_ES: {
  expirationDatePlaceholder: string,
  togglePasswordVisibilityLabel: string,
  loading: string,
  linkOpensInNewTab: string,
  modalClose: string,
  dialogCancelButton: string,
  dialogAcceptButton: string,
  formFieldOptionalLabelSuffix: string,
  formFieldErrorIsMandatory: string,
  formCreditCardNumberLabel: string,
  formCreditCardExpirationLabel: string,
  formCreditCardCvvLabel: string,
  formCreditCardCvvError: string,
  formCreditCardCvvTooltipVisaMcButton: string,
  formCreditCardCvvTooltipVisaMc: string,
  formCreditCardCvvTooltipAmex: string,
  formCreditCardExpirationError: string,
  formCreditCardNumberError: string,
  formDateOutOfRangeError: string,
  formEmailError: string,
  formIbanError: string,
  closeButtonLabel: string,
  formSearchClear: string,
  menuLabelSuffix: string,
  openNavigationMenu: string,
  closeNavigationMenu: string,
  backNavigationBar: string,
  clearButton: string,
  carouselNextButton: string,
  carouselPrevButton: string,
};
declare export var getTexts: (locale: Locale) => typeof TEXTS_ES;
declare export var NAVBAR_HEIGHT_MOBILE: 56;
declare export var NAVBAR_HEIGHT_DESKTOP: 80;
declare export var dimensions: {
  headerMobileHeight: number,
  headerDesktopHeight: number,
};
declare export { mediaQueriesConfig } from "./media-queries.css";
declare type LinkComponent = React.ComponentType<{
  style?: CssStyle,
  className?: string,
  "aria-label"?: string,
  disabled?: boolean,
  role?: string,
  "data-testid"?: string,
  "aria-checked"?: "true" | "false" | boolean,
  "aria-controls"?: string,
  "aria-expanded"?: "true" | "false" | boolean,
  "aria-hidden"?: "true" | "false" | boolean,
  "aria-selected"?: "true" | "false" | boolean,
  tabIndex?: number,
  innerRef?: React.Ref<HTMLAnchorElement>,
  to:
    | string
    | {
        pathname?: string,
        search?: string,
        state?: mixed,
        hash?: string,
        key?: string,
      },
  replace?: boolean,
  onClick?: (event: SyntheticMouseEvent<HTMLElement>) => any,
  onKeyDown?: (event: SyntheticKeyboardEvent<HTMLElement>) => any,
  children: React.Node,
}>;
declare export var AnchorLink: LinkComponent;
export type ColorScheme = "dark" | "light" | "auto";
export type EventFormat = "universal-analytics" | "google-analytics-4";
export type ThemeConfig = {
  skin: $ReadOnly<Skin>,
  colorScheme?: ColorScheme,
  i18n: {
    locale: Locale,
    phoneNumberFormattingRegionCode: RegionCode,
  },
  platformOverrides?: {
    platform?: "ios" | "android" | "desktop",
    insideNovumNativeApp?: boolean,
    userAgent?: string,
  },
  texts?: $Shape<ThemeTexts>,
  analytics?: {
    logEvent: (trackingEvent: TrackingEvent) => Promise<void>,
    eventFormat?: EventFormat,
  },
  dimensions?: {
    headerMobileHeight: number | "mistica",
  },

  /**
   * @deprecated in future versions, mistica won't allow to configure media query breakpoints.
   */
  mediaQueries?: {
    tabletMinWidth: number,
    desktopMinWidth: number,
    largeDesktopMinWidth: number,
    desktopOrTabletMinHeight: number,
  },
  Link?: LinkComponent,
  useHrefDecorator?: () => (href: string) => string,
  enableTabFocus?: boolean,
};
export type Theme = {
  skinName: SkinName,
  i18n: {
    locale: Locale,
    phoneNumberFormattingRegionCode: RegionCode,
  },
  platformOverrides: {
    platform?: "ios" | "android" | "desktop",
    insideNovumNativeApp?: boolean,
    userAgent?: string,
  },
  texts: ThemeTexts,
  analytics: {
    logEvent: (trackingEvent: TrackingEvent) => Promise<void>,
    eventFormat: EventFormat,
  },
  dimensions: {
    headerMobileHeight: number,
    headerDesktopHeight: number,
  },
  mq: MediaQueries,
  colors: Colors,
  textPresets: TextPresetsConfig,
  Link: LinkComponent,
  isDarkMode: boolean,
  isIos: boolean,
  useHrefDecorator: () => (href: string) => string,
};

import { type CssStyle } from "./__css_types__.js.flow";
