// @flow
/**
 * Flowtype definitions for theme
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as React from "react";
import { type RegionCode } from "./utils/region-code";
import { type Locale } from "./utils/locale";
import { type Skin } from "./colors";
import { type TrackingEvent } from "./utils/types";
declare var colors: {
  controlActive: string,
  controlInactive: string,
  controlError: string,
  textPrimary: string,
  background: string,
  backgroundHeading: string,
  backgroundAlternative: string,
  backgroundPromo: string,
  backgroundBrand: string,
  buttonPrimaryBackground: string,
  buttonPrimaryBackgroundSelected: string,
  buttonPrimaryBackgroundDisabled: string,
  buttonPrimaryBackgroundHover: string,
  buttonPrimaryText: string,
  buttonSecondaryBackground: string,
  buttonSecondaryText: string,
  buttonSecondaryTextSelected: string,
  buttonSecondaryTextDisabled: string,
  buttonSecondaryBorder: string,
  buttonSecondaryBorderSelected: string,
  buttonSecondaryBorderDisabled: string,
  buttonPrimaryBackgroundInverse: string,
  textButtonPrimaryInverse: string,
  buttonPrimaryBackgroundInverseSelected: string,
  textButtonPrimaryInverseSelected: string,
  buttonPrimaryBackgroundInverseDisabled: string,
  textButtonPrimaryInverseDisabled: string,
  buttonSecondaryBorderInverse: string,
  textButtonSecondaryInverse: string,
  buttonSecondaryBorderInverseSelected: string,
  textButtonSecondaryInverseSelected: string,
  buttonSecondaryBorderInverseDisabled: string,
  textButtonSecondaryInverseDisabled: string,
  buttonDangerBackground: string,
  buttonDangerBackgroundDisabled: string,
  buttonDangerBackgroundHover: string,
  buttonDangerBackgroundSelected: string,
  textLink: string,
  textInactive: string,
  textPrimaryInverse: string,
  buttonLinkBackgroundSelected: string,
  iconHighlight: string,
  overscrollColorTop: string,
  backgroundSpecialBottom: string,
  backgroundSpecial1: string,
  backgroundOpacity: string,
  textPrimarySpecial: string,
  textSecondary: string,
  loadingBarPrimary: string,
  loadingBarPrimaryInverse: string,
  loadingBarBackground: string,
  loadingBarBackgroundInverse: string,
  layerDecorations: string,
  divider: string,
  border: string,
  borderLight: string,
  textDanger: string,
  textError: string,
  feedbackErrorBackground: string,
  feedbackInfoBackground: string,
  textAccent: string,
  textLinkSnackbar: string,
  iconAccent: string,
  iconSecondary: string,
  iconPrimary: string,
  iconTertiary: string,
  iconInverse: string,
  badgeBackground: string,
  toggleAndroidInactive: string,
  toggleAndroidBackgroundInactive: string,
  toggleAndroidActive: string,
  toggleAndroidBackgroundActive: string,
  toggleIosInactive: string,
  toggleIosBackgroundInactive: string,
  toggleIosBackgroundActive: string,
  textAppbar: string,
  textAppbarSelected: string
};
declare var texts: {
  expirationDatePlaceholder: string,
  togglePasswordVisibilityLabel: string,
  loading: string,
  linkOpensInNewTab: string,
  modalClose: string,
  dialogCancelButton: string,
  dialogAcceptButton: string,
  formFieldOptionalLabelSuffix: string,
  formFieldErrorIsMandatory: string,
  formCreditCardNumberLabel: string,
  formCreditCardExpirationLabel: string,
  formCreditCardCvvLabel: string,
  formCreditCardCvvError: string,
  formCreditCardCvvTooltipVisaMcButton: string,
  formCreditCardCvvTooltipVisaMc: string,
  formCreditCardCvvTooltipAmex: string,
  formCreditCardExpirationError: string,
  formCreditCardNumberError: string,
  formEmailError: string,
  closeButtonLabel: string,
  formSearchClear: string
};
declare type ThemeColors = typeof colors;
export type ThemeTexts = typeof texts;
declare type LinkComponent = React.ComponentType<{
  style?: CssStyle,
  className?: string,
  "aria-label"?: string,
  disabled?: boolean,
  role?: string,
  "data-testid"?: string,
  "aria-checked"?: "true" | "false" | boolean,
  "aria-controls"?: string,
  "aria-expanded"?: "true" | "false" | boolean,
  "aria-hidden"?: "true" | "false" | boolean,
  "aria-selected"?: "true" | "false" | boolean,
  tabIndex?: number,
  innerRef?: React.Ref<HTMLAnchorElement>,
  to:
    | string
    | {
        pathname?: string,
        search?: string,
        state?: mixed,
        hash?: string,
        key?: string
      },
  replace?: boolean,
  onClick?: (event: SyntheticMouseEvent<HTMLElement>) => any,
  onKeyDown?: (event: SyntheticKeyboardEvent<HTMLElement>) => any,
  children: React.Node
}>;
export type ThemeConfig = {
  skin: Skin,
  colorOverride?: string,
  i18n: {
    locale: Locale,
    phoneNumberFormattingRegionCode: RegionCode
  },
  platformOverrides?: {
    platform?: "ios" | "android",
    insideNovumNativeApp?: boolean,
    userAgent?: string
  },
  texts?: $Rest<ThemeTexts, {}>,
  analytics?: {
    logEvent: (trackingEvent: TrackingEvent) => Promise<void>
  },
  dimensions?: {
    headerMobileHeight: number
  },
  mediaQueries?: {
    tabletMinWidth: number,
    desktopMinWidth: number,
    largeDesktopMinWidth: number,
    desktopOrTabletMinHeight: number
  },
  Link?: LinkComponent
};
export type Theme = {
  skin: Skin,
  colorOverride?: string,
  i18n: {
    locale: Locale,
    phoneNumberFormattingRegionCode: RegionCode
  },
  platformOverrides: {
    platform?: "ios" | "android",
    insideNovumNativeApp?: boolean,
    userAgent?: string
  },
  texts: ThemeTexts,
  analytics: {
    logEvent: (trackingEvent: TrackingEvent) => Promise<void>
  },
  dimensions: {
    headerMobileHeight: number
  },
  mq: {
    mobile: string,
    tablet: string,
    desktop: string,
    largeDesktop: string,
    tabletOrBigger: string,
    tabletOrSmaller: string
  },
  colors: ThemeColors,
  Link: LinkComponent
};
declare export var baseTheme: Theme;
declare export {};

import { type CssStyle } from "./__types__.js.flow";
