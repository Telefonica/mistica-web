// @flow
/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import {
  type Page,
  type ElementHandle,
  type ClickOptions,
  type ScreenshotOptions
} from "puppeteer";
import { type Skin } from "../colors";
declare var MOBILE_DEVICE_IOS: "MOBILE_IOS";
declare var MOBILE_DEVICE_ANDROID: "MOBILE_ANDROID";
declare var TABLET_DEVICE: "TABLET";
declare var DESKTOP_DEVICE: "DESKTOP";
export type Device =
  | typeof MOBILE_DEVICE_IOS
  | typeof MOBILE_DEVICE_ANDROID
  | typeof TABLET_DEVICE
  | typeof DESKTOP_DEVICE;
export type PageApi = {
  type: (
    selector: ElementHandle | Promise<ElementHandle>,
    text: string,
    options?: {
      delay: number
    }
  ) => Promise<void>,
  click: (
    selector: ElementHandle | Promise<ElementHandle>,
    options?: ClickOptions
  ) => Promise<void>,
  screenshot: (
    options?: ScreenshotOptions
  ) => $Call<<R>((...args: any[]) => R) => R, $PropertyType<Page, "screenshot">>
};
declare type Query = (m: string) => Promise<ElementHandle>;
declare type AllQuery = (m: string) => Promise<Array<ElementHandle>>;
declare type Queries = {
  getByText: Query,
  getAllByText: AllQuery,
  getByTestId: Query,
  getAllByTestId: AllQuery,
  getByTitle: Query,
  getAllByTitle: AllQuery,
  getByRole: Query,
  getAllByRole: AllQuery,
  getByPlaceholderText: Query,
  getAllByPlaceholderText: AllQuery,
  getByLabelText: Query,
  getAllByLabelText: AllQuery,
  getByAltText: Query,
  getAllByAltText: AllQuery
};
declare export var openStoryPage: (x: {
  section: string,
  name: string,
  device?: "MOBILE_IOS" | "MOBILE_ANDROID" | "TABLET" | "DESKTOP" | void,
  skin?: "Movistar" | "O2" | "Vivo" | void
}) => Promise<PageApi>;
declare export var screen: Queries;
declare export {};
