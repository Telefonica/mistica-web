// @flow

import * as React from "react";
import type {
  DataAttributes,
  RendersElement,
  RendersNullableElement,
  TrackingEvent,
} from "./utils/types";
import type { Location } from "history";
declare export var BUTTON_MIN_WIDTH: 136;
declare type CommonProps = {
  children: React.Node,
  className?: string,
  style?: CssStyle,
  small?: boolean,
  showSpinner?: boolean,
  loadingText?: string,
  disabled?: boolean,
  trackingEvent?: TrackingEvent | $ReadOnlyArray<TrackingEvent>,
  trackEvent?: boolean,

  /**
   * "data-" prefix is automatically added. For example, use "testid" instead of "data-testid"
   */
  dataAttributes?: DataAttributes,
  "aria-controls"?: string,
  "aria-expanded"?: "true" | "false",
  tabIndex?: number,
};
export type ToButtonProps = {
  ...$Exact<CommonProps>,
  to: string | Location,
  fullPageOnWebView?: boolean,
};
export type OnPressButtonProps = {
  ...$Exact<CommonProps>,
  onPress: (event: SyntheticMouseEvent<HTMLElement>) => void | void,
};
export type HrefButtonProps = {
  ...$Exact<CommonProps>,
  href: string,
  newTab?: boolean,
  loadOnTop?: boolean,
};
export type FakeButtonProps = {
  ...$Exact<CommonProps>,
  fake: true,
};
export type SubmitButtonProps = {
  ...$Exact<CommonProps>,
  submit: true,
};
export type ButtonProps =
  | FakeButtonProps
  | SubmitButtonProps
  | ToButtonProps
  | OnPressButtonProps
  | HrefButtonProps;
declare type ButtonLinkCommonProps = {
  children: React.Node,
  trackingEvent?: TrackingEvent | $ReadOnlyArray<TrackingEvent>,
  trackEvent?: boolean,

  /**
   * "data-" prefix is automatically added. For example, use "testid" instead of "data-testid"
   */
  dataAttributes?: DataAttributes,
  aligned?: boolean,
};
declare type ButtonLinkOnPressProps = {
  ...$Exact<ButtonLinkCommonProps>,
  onPress: (event: SyntheticMouseEvent<HTMLElement>) => void,
};
declare type ButtonLinkHrefProps = {
  ...$Exact<ButtonLinkCommonProps>,
  href: string,
  newTab?: boolean,
};
declare type ButtonLinkToProps = {
  ...$Exact<ButtonLinkCommonProps>,
  to: string,
  fullPageOnWebView?: boolean,
};
export type ButtonLinkProps =
  | ButtonLinkOnPressProps
  | ButtonLinkHrefProps
  | ButtonLinkToProps;
declare export var ButtonLink: React.ComponentType<{
  ...ButtonLinkProps,
  ref?: React.Ref<HTMLAnchorElement | HTMLDivElement | HTMLButtonElement>,
}>;
declare export var ButtonPrimary: React.ComponentType<ButtonProps>;
declare export var ButtonSecondary: React.ComponentType<ButtonProps>;
declare export var ButtonDanger: React.ComponentType<ButtonProps>;
export type ButtonElement =
  | RendersElement<typeof ButtonPrimary>
  | RendersElement<typeof ButtonSecondary>
  | RendersElement<typeof ButtonDanger>;
export type NullableButtonElement =
  | RendersNullableElement<typeof ButtonPrimary>
  | RendersNullableElement<typeof ButtonSecondary>
  | RendersNullableElement<typeof ButtonDanger>;
declare export {};

import { type CssStyle } from "./__types__.js.flow";
