// @flow

import * as React from "react";
import type { TouchableElement } from "./touchable";
import type { DataAttributes, TrackingEvent } from "./utils/types";
import type { ExclusifyUnion } from "./utils/utility-types";
declare type CommonProps = {
  headline?: string | React.Node,
  title: string,
  titleLinesMax?: number,
  subtitle?: string,
  subtitleLinesMax?: number,
  description?: string | null,
  descriptionLinesMax?: number,
  asset?: React.Node,
  badge?: boolean | number,
  role?: string,
  extra?: React.Node,
  dataAttributes?: DataAttributes,
  disabled?: boolean,
  withChevron?: boolean,
};
declare type Right =
  | ((x: {
      centerY: boolean,
    }) => React.Node)
  | React.Node;
declare type ControlProps = {
  name?: string,
  value?: boolean,
  defaultValue?: boolean,
  onChange?: (checked: boolean) => void,
};
declare type BasicRowContentProps = {
  ...$Exact<CommonProps>,

  right?: Right,
};
declare type SwitchRowContentProps = {
  ...$Exact<CommonProps>,

  onPress?: () => void,
  switch: ControlProps | void,
};
declare type CheckboxRowContentProps = {
  ...$Exact<CommonProps>,

  onPress?: () => void,
  checkbox: ControlProps | void,
};
declare type RadioRowContentProps = {
  ...$Exact<CommonProps>,

  radioValue: string,
};
declare type HrefRowContentProps = {
  ...$Exact<CommonProps>,

  trackingEvent?: TrackingEvent | $ReadOnlyArray<TrackingEvent>,
  href: string,
  newTab?: boolean,
  right?: Right,
};
declare type ToRowContentProps = {
  ...$Exact<CommonProps>,

  trackingEvent?: TrackingEvent | $ReadOnlyArray<TrackingEvent>,
  to: string,
  fullPageOnWebView?: boolean,
  replace?: boolean,
  right?: Right,
};
declare type OnPressRowContentProps = {
  ...$Exact<CommonProps>,

  trackingEvent?: TrackingEvent | $ReadOnlyArray<TrackingEvent>,
  onPress: () => void,
  right?: Right,
};
declare type RowContentProps = ExclusifyUnion<
  | BasicRowContentProps
  | SwitchRowContentProps
  | RadioRowContentProps
  | CheckboxRowContentProps
  | HrefRowContentProps
  | ToRowContentProps
  | OnPressRowContentProps
>;
declare export var Row: React.AbstractComponent<RowContentProps, TouchableElement>;
declare type RowListProps = {
  children: React.Node,
  ariaLabelledby?: string,
  role?: string,
  noLastDivider?: boolean,
  dataAttributes?: DataAttributes,
};
declare export var RowList: React.ComponentType<RowListProps>;
declare type CommonBoxedRowProps = {
  isInverse?: boolean,
};
declare type BasicBoxedRowProps = {
  ...$Exact<BasicRowContentProps>,
  ...$Exact<CommonBoxedRowProps>,
};
declare type SwitchBoxedRowProps = {
  ...$Exact<SwitchRowContentProps>,
  ...$Exact<CommonBoxedRowProps>,
};
declare type CheckboxBoxedRowProps = {
  ...$Exact<CheckboxRowContentProps>,
  ...$Exact<CommonBoxedRowProps>,
};
declare type RadioBoxedRowProps = {
  ...$Exact<RadioRowContentProps>,
  ...$Exact<CommonBoxedRowProps>,
};
declare type HrefBoxedRowProps = {
  ...$Exact<HrefRowContentProps>,
  ...$Exact<CommonBoxedRowProps>,
};
declare type ToBoxedRowProps = {
  ...$Exact<ToRowContentProps>,
  ...$Exact<CommonBoxedRowProps>,
};
declare type OnPressBoxedRowProps = {
  ...$Exact<OnPressRowContentProps>,
  ...$Exact<CommonBoxedRowProps>,
};
declare type BoxedRowProps = ExclusifyUnion<
  | BasicBoxedRowProps
  | SwitchBoxedRowProps
  | RadioBoxedRowProps
  | CheckboxBoxedRowProps
  | HrefBoxedRowProps
  | ToBoxedRowProps
  | OnPressBoxedRowProps
>;
declare export var BoxedRow: React.AbstractComponent<BoxedRowProps, HTMLDivElement>;
declare type BoxedRowListProps = {
  children: React.Node,
  ariaLabelledby?: string,
  role?: string,
  dataAttributes?: DataAttributes,
};
declare export var BoxedRowList: React.ComponentType<BoxedRowListProps>;
declare export {};
