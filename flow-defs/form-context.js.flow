// @flow
/**
 * Flowtype definitions for form-context
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as React from "react";
export type FormStatus = "filling" | "sending";
export type FormErrors = { [name: string]: string | void, ... };
export type FieldValidator = (value: any, rawValue: string) => string | void;
declare type FieldRegistration = {
  name: string,
  field?: HTMLInputElement | HTMLSelectElement | null,
  validate?: FieldValidator,
  focusableElement?: HTMLDivElement | HTMLSelectElement | null
};
declare type Context = {
  rawValues: { [name: string]: string, ... },
  setRawValue: (param: {
    +name: string,
    +value: string
  }) => void,
  values: { [name: string]: any, ... },
  setValue: (param: {
    +name: string,
    +value: any
  }) => void,
  formStatus: FormStatus,
  register: (ref: FieldRegistration) => void,
  formErrors: FormErrors,
  setFormError: (param: {
    +name: string,
    +error?: string
  }) => void,
  jumpToNext: (currentName: string) => void
};
declare export var FormContext: React.Context<Context>;
declare export var useForm: () => Context;
declare export {};
