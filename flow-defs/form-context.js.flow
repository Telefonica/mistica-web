// @flow

import * as React from "react";
export type FormStatus = "filling" | "sending";
export type FormErrors = { [name: string]: string | void, ... };
export type FieldValidator = (value: any, rawValue: string) => string | void;
export type FieldRegistration = {
  input?: HTMLInputElement | HTMLSelectElement | null,
  validator?: FieldValidator,
  focusableElement?: HTMLDivElement | HTMLSelectElement | null,
};
declare type Context = {
  rawValues: { [name: string]: any, ... },
  setRawValue: (param: {
    +name: string,
    +value: any,
  }) => void,
  values: { [name: string]: any, ... },
  setValue: (param: {
    +name: string,
    +value: any,
  }) => void,
  formStatus: FormStatus,
  register: (name: string, ref: FieldRegistration) => void,
  formErrors: FormErrors,
  setFormError: (param: {
    +name: string,
    +error?: string,
  }) => void,
  jumpToNext: (currentName: string) => void,
  submit: () => void,
  validate: () => FormErrors,
  formId: string,
};
declare export var FormContext: React.Context<Context>;
declare export var useForm: () => Context;
declare export var useControlProps: <T>(x: {
  name: string,
  value: T | void,
  defaultValue: T | void,
  onChange: ((value: T) => void) | void,
  disabled?: boolean | void,
}) => {
  name: string,
  value?: T | void,
  defaultValue?: T | void,
  onChange: (value: T) => void,
  focusableRef: (focusableElement: HTMLDivElement | null) => void,
  disabled: boolean | void,
};
declare export var useFieldProps: (x: {
  name: string,
  value: string | void,
  defaultValue: string | void,
  processValue: (value: string) => mixed,
  helperText: string | void,
  optional: boolean | void,
  error: boolean | void,
  disabled: boolean | void,
  onBlur: ((event: SyntheticFocusEvent<Element>) => void) | void,
  validate: ((value: any, rawValue: string) => string | void) | void,
  onChange: ((event: SyntheticEvent<HTMLInputElement>) => void) | void,
  onChangeValue: ((value: any, rawValue: string) => void) | void,
}) => {
  value?: string | void,
  defaultValue?: string | void,
  name: string,
  helperText?: string | void,
  required: boolean,
  error: boolean,
  disabled: boolean,
  onBlur: (event: SyntheticFocusEvent<Element>) => void,
  inputRef: (field: HTMLInputElement | null) => void,
  onChange: (event: SyntheticEvent<HTMLInputElement>) => void,
};
declare export {};
