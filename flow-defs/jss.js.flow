// @flow
import * as React from 'react';
import {type Theme} from './theme';

declare export var getJss: () => any;

declare type CssClass = {[K: string]: string | number | boolean | CssClass, ...};

declare type Sheet = {[K: string]: CssClass, ...};

/**
 * This function does nothing, this is just used to make css-in-js autocomplete
 * editor extensions work with JSS. @see https://github.com/ansumanshah/css-in-js
 */
declare export var createSheet: <S: Sheet>(s: S) => $ObjMap<S, () => string>;

declare class StyledComponent<P, +WC> extends React.Component<P> {
    static +WrappedComponent: WC;
}

declare type CreateStyledComponent = <P, Comp: React.ComponentType<P>, ST: {[_: $Keys<Comp>]: any, ...}>(
    Component: Comp
) => Class<StyledComponent<$Diff<React.ElementConfig<Comp>, {classes: *}>, Comp>> & $Shape<ST>;

declare export var withSheet: <S: {...}>(sheet: S) => CreateStyledComponent;

declare export var removeJssProps: <P: {sheet?: any, classes?: any}>(
    props: P
) => $Diff<P, {classes: *, sheet: *}>;

declare type CSSValue<P> = void | number | boolean | string | ((P) => string | number | boolean);
declare type ClassDefinition<P> = {
    +[cssProp: string]:
        | CSSValue<P>
        | {
              +[cssProp: string]:
                  | CSSValue<P>
                  | {
                        +[cssProp: string]: CSSValue<P>,
                        ...
                    },
              ...
          },
    ...
};

declare type StylesDefinition<P> = {+[className: string]: ClassDefinition<P>, ...};

declare type UseStyles<P, S: StylesDefinition<any>> = (props: P) => $ObjMap<S, () => string>;

declare export var createUseStyles: <P, S: StylesDefinition<P>>(
    styles: (theme: Theme) => S
) => UseStyles<P, S>;

declare export class ServerSideStyles {
    render(el: React.Element<any>): React.Element<any>;
    getStylesString(): string;
    renderStyles(): React.Element<'style'>;
}
