// @flow
/**
 * Flowtype definitions for form
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as React from "react";
import { type AutoComplete } from "./text-field";
import { type FieldValidator } from "./form-context";
declare type FormValues = { [name: string]: any, ... };
declare type FormProps = {
  id?: string,
  onSubmit: (values: FormValues, rawValues: FormValues) => Promise<void> | void,
  initialValues?: FormValues,
  autoJump?: boolean,
  children: React.Node,
  className?: string
};
declare var Form: React.ComponentType<FormProps>;
export type CommonFormFieldProps = {
  autoFocus?: boolean,
  disabled?: boolean,
  error?: boolean,
  helperText?: string,
  id?: string,
  label: string,
  name: string,
  optional?: boolean,
  maxLength?: number,
  inputProps?: { [prop: string]: string | number, ... },
  validate?: FieldValidator,
  autoComplete?: AutoComplete,
  onFocus?: (event: SyntheticFocusEvent<>) => void,
  onBlur?: (event: SyntheticFocusEvent<>) => void,
  fullWidth?: boolean,
  getSuggestions?: (text: string) => Array<string>,
  placeholder?: string
};
declare export default typeof Form;
